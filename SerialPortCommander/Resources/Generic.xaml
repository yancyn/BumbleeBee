<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    x:Class="SerialPortCommander.Generic"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:io="clr-namespace:System.IO.Ports;assembly=System"
                    xmlns:s="clr-namespace:SerialPortCommander"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <ObjectDataProvider x:Key="ParityEnums" MethodName="GetValues" ObjectType="{x:Type sys:Enum}">
        <ObjectDataProvider.MethodParameters>
            <x:TypeExtension TypeName="io:Parity"/>
        </ObjectDataProvider.MethodParameters>
    </ObjectDataProvider>
    <ObjectDataProvider x:Key="StopBitsEnums" MethodName="GetValues" ObjectType="{x:Type sys:Enum}">
        <ObjectDataProvider.MethodParameters>
            <x:TypeExtension TypeName="io:StopBits"/>
        </ObjectDataProvider.MethodParameters>
    </ObjectDataProvider>

    <!-- For all labeling use in front of input control -->
    <Style x:Key="Labeling" TargetType="{x:Type TextBlock}">
        <Setter Property="Padding" Value="0,0,4,0"/>
        <Setter Property="Width" Value="200"/>
        <Setter Property="TextAlignment" Value="Right"/>
    </Style>
    
    <!-- For unit label use after input-->
    <Style x:Key="Suffix" TargetType="{x:Type TextBlock}">
        <Setter Property="Width" Value="20"/>
        <Setter Property="TextAlignment" Value="Left"/>
    </Style>
    
    <Style TargetType="{x:Type Button}">
        <Setter Property="Margin" Value="4"/>
        <Setter Property="Width" Value="60"/>
    </Style>
    <Style x:Key="BorderlessButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Width="Auto">
                        <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="UpButton" BasedOn="{StaticResource BorderlessButton}" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Path Fill="Blue" Data="M 0 6 L 12 6 L 6 0 Z"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Cursor" Value="Hand"/>
    </Style>
    <Style x:Key="DownButton" BasedOn="{StaticResource BorderlessButton}" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Path Fill="Blue" Data="M 0 0 L 6 6 L 12 0 Z"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Cursor" Value="Hand"/>
    </Style>
    <Style x:Key="TwoComboBox" BasedOn="{StaticResource {x:Type RadioButton}}" TargetType="{x:Type ComboBox}">

    </Style>
    <Style x:Key="RedToolTip" TargetType="{x:Type TextBox}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="0,2,40,2" />
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <DockPanel LastChildFill="true">
                        <Border Background="Red" DockPanel.Dock="right" Margin="5,0,0,0" Width="20" Height="20" CornerRadius="10"
                            ToolTip="{Binding ElementName=customAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}">
                            <TextBlock Text="!" VerticalAlignment="center" HorizontalAlignment="center" FontWeight="Bold" Foreground="white"/>
                        </Border>
                        <AdornedElementPlaceholder Name="customAdorner" VerticalAlignment="Center" >
                            <Border BorderBrush="red" BorderThickness="1" />
                        </AdornedElementPlaceholder>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <s:BooleanConverter x:Key="BooleanConverter"/>
    <s:BackgroundConverter x:Key="BackgroundConverter"/>

    <s:LayoutSelector x:Key="LayoutSelector"/>
    <DataTemplate x:Key="TextTemplate">
        <WrapPanel VerticalAlignment="Bottom">
            <TextBlock Text="{Binding Path=Name}" Style="{StaticResource Labeling}"/>
            <TextBox Text="{Binding Path=ParameterValue,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,ValidatesOnDataErrors=True,NotifyOnValidationError=True}"
                     Style="{StaticResource RedToolTip}" ToolTip="{Binding ElementName=customAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"
                     Width="80" TextAlignment="Right">
                <TextBox.Background>
                    <MultiBinding Converter="{StaticResource BackgroundConverter}">
                        <Binding Path="Success" UpdateSourceTrigger="PropertyChanged"/>
                        <Binding Path="."/>
                    </MultiBinding>
                </TextBox.Background>
            </TextBox>
            <TextBlock Text="{Binding Path=Unit}"/>
        </WrapPanel>
    </DataTemplate>
    <DataTemplate x:Key="IntegerTemplate">
        <WrapPanel VerticalAlignment="Bottom">
            <TextBlock Text="{Binding Path=Name}" Style="{StaticResource Labeling}"/>
            <!--<s:NumericUpDown Width="100" MaxValue="{Binding Path=MaxValue}" MinValue="{Binding Path=MinValue}"
                             Value="{Binding Path=ParameterValue,UpdateSourceTrigger=PropertyChanged}"/>-->
            <TextBox Text="{Binding Path=ParameterValue,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,ValidatesOnDataErrors=True,NotifyOnValidationError=True}"
                     Style="{StaticResource RedToolTip}" ToolTip="{Binding ElementName=customAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"
                     Width="80" TextAlignment="Right">
                <TextBox.Background>
                    <MultiBinding Converter="{StaticResource BackgroundConverter}">
                        <Binding Path="Success" UpdateSourceTrigger="PropertyChanged"/>
                        <Binding Path="."/>
                    </MultiBinding>
                </TextBox.Background>
            </TextBox>
            <TextBlock Text="{Binding Path=Unit}"/>
        </WrapPanel>
    </DataTemplate>
    
    <s:HexConverter x:Key="HexConverter"/>
    <DataTemplate x:Key="HexTemplate">
        <WrapPanel VerticalAlignment="Bottom">
            <TextBlock Text="{Binding Path=Name}" Style="{StaticResource Labeling}"/>
            <TextBlock Text="0x"/>
            <TextBox Style="{StaticResource RedToolTip}" Width="60" TextAlignment="Right"
                     ToolTip="{Binding ElementName=customAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}">
                <TextBox.Text>
                    <MultiBinding Converter="{StaticResource HexConverter}">
                        <Binding Path="ParameterValue" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged"
                                 ValidatesOnDataErrors="True" NotifyOnValidationError="True"/>
                        <Binding Path="."/>
                    </MultiBinding>
                </TextBox.Text>
                <TextBox.Background>
                    <MultiBinding Converter="{StaticResource BackgroundConverter}">
                        <Binding Path="Success" UpdateSourceTrigger="PropertyChanged"/>
                        <Binding Path="."/>
                    </MultiBinding>
                </TextBox.Background>
            </TextBox>
            <TextBlock Text="{Binding Path=Unit}"/>
        </WrapPanel>
    </DataTemplate>
    <!--<DataTemplate x:Key="RadioTemplate">
        <WrapPanel>
            <TextBlock Text="{Binding Path=Name}" ToolTip="{Binding Path=ParameterValue}"/>
            <ComboBox Style="{StaticResource TwoComboBox}" ItemsSource="{Binding Path=ParameterOptions}" DisplayMemberPath="Value"
                      SelectedValue="{Binding Path=ParameterValue,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
            <TextBlock Text="{Binding Path=Unit}"/>
        </WrapPanel>
    </DataTemplate>-->
    <DataTemplate x:Key="OptionsTemplate">
        <WrapPanel VerticalAlignment="Bottom">
            <TextBlock Text="{Binding Path=Name}" ToolTip="{Binding Path=ParameterValue}" Style="{StaticResource Labeling}"/>
            <ComboBox ItemsSource="{Binding Path=ParameterOptions}" DisplayMemberPath="Value"
                      SelectedValue="{Binding Path=ParameterValue,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
            <TextBlock Text="{Binding Path=Unit}"/>
        </WrapPanel>
    </DataTemplate>

    <s:RadioSelector x:Key="RadioSelector"/>
    <DataTemplate x:Key="RadioTemplate">
        <WrapPanel VerticalAlignment="Bottom">
            <TextBlock Text="{Binding Path=Name}" Style="{StaticResource Labeling}"/>
            <ListView ItemsSource="{Binding Path=ParameterOptions}" ItemTemplateSelector="{StaticResource RadioSelector}"/>
            <TextBlock Text="{Binding Path=Unit}"/>
        </WrapPanel>
    </DataTemplate>
    <DataTemplate x:Key="PositiveRadioTemplate">
        <RadioButton Content="{Binding Value}" GroupName="{Binding Key}"
            IsChecked="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}},
            Path=DataContext.ParameterValue,Converter={StaticResource BooleanConverter},ConverterParameter=1,
            Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Checked="RadioButton_Checked"/>
    </DataTemplate>
    <DataTemplate x:Key="NegativeRadioTemplate">
        <RadioButton Content="{Binding Value}" GroupName="{Binding Key}"
            IsChecked="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}},
            Path=DataContext.ParameterValue,Converter={StaticResource BooleanConverter},ConverterParameter=0,
            Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Checked="RadioButton_Checked"/>
    </DataTemplate>
</ResourceDictionary>