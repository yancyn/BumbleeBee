<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    x:Class="SerialPortCommander.Generic"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:io="clr-namespace:System.IO.Ports;assembly=System"
                    xmlns:s="clr-namespace:SerialPortCommander"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <ObjectDataProvider x:Key="ParityEnums" MethodName="GetValues" ObjectType="{x:Type sys:Enum}">
        <ObjectDataProvider.MethodParameters>
            <x:TypeExtension TypeName="io:Parity"/>
        </ObjectDataProvider.MethodParameters>
    </ObjectDataProvider>
    <ObjectDataProvider x:Key="StopBitsEnums" MethodName="GetValues" ObjectType="{x:Type sys:Enum}">
        <ObjectDataProvider.MethodParameters>
            <x:TypeExtension TypeName="io:StopBits"/>
        </ObjectDataProvider.MethodParameters>
    </ObjectDataProvider>

    <!-- For all labeling use in front of input control -->
    <Style x:Key="Labeling" TargetType="{x:Type TextBlock}">
        <Setter Property="Padding" Value="0,0,4,0"/>
        <Setter Property="Width" Value="200"/>
        <Setter Property="TextAlignment" Value="Right"/>
    </Style>
    
    <!-- For unit label use after input-->
    <Style x:Key="Suffix" TargetType="{x:Type TextBlock}">
        <Setter Property="Width" Value="20"/>
        <Setter Property="TextAlignment" Value="Left"/>
    </Style>
    
    <Style TargetType="{x:Type Button}">
        <Setter Property="Margin" Value="4"/>
        <Setter Property="Width" Value="60"/>
    </Style>
    <Style x:Key="BorderlessButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Width="Auto">
                        <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="UpButton" BasedOn="{StaticResource BorderlessButton}" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Path Fill="Blue" Data="M 0 6 L 12 6 L 6 0 Z"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Cursor" Value="Hand"/>
    </Style>
    <Style x:Key="DownButton" BasedOn="{StaticResource BorderlessButton}" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Path Fill="Blue" Data="M 0 0 L 6 6 L 12 0 Z"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Cursor" Value="Hand"/>
    </Style>
    <Style x:Key="TwoComboBox" BasedOn="{StaticResource {x:Type RadioButton}}" TargetType="{x:Type ComboBox}">

    </Style>
    <Style x:Key="RedToolTip" TargetType="{x:Type FrameworkElement}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="0,2,0,2" />
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <DockPanel LastChildFill="true">
                        <Border Background="Red" DockPanel.Dock="Right" Margin="5,0,0,0" Width="20" Height="20" CornerRadius="10"
                            ToolTip="{Binding ElementName=customAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}">
                            <TextBlock Text="!" VerticalAlignment="Center" HorizontalAlignment="Center" FontWeight="Bold" Foreground="White"/>
                        </Border>
                        <AdornedElementPlaceholder Name="customAdorner" VerticalAlignment="Center">
                            <Border BorderBrush="Red" BorderThickness="1" />
                        </AdornedElementPlaceholder>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RedNumberToolTip" TargetType="{x:Type s:NumericUpDown}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="0,2,0,2" />
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <DockPanel LastChildFill="true">
                        <Border Background="Red" DockPanel.Dock="Right" Margin="5,0,0,0" Width="20" Height="20" CornerRadius="10"
                            ToolTip="{Binding ElementName=customAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}">
                            <TextBlock Text="!" VerticalAlignment="Center" HorizontalAlignment="Center" FontWeight="Bold" Foreground="White"/>
                        </Border>
                        <AdornedElementPlaceholder Name="customAdorner" VerticalAlignment="Center">
                            <Border BorderBrush="Red" BorderThickness="1" />
                        </AdornedElementPlaceholder>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="InActive" StartPoint="0,0" EndPoint="1,1" >
        <GradientStop Offset="0.0" Color="#00000000" />
        <GradientStop Offset="1.0" Color="#FF000000" />
    </LinearGradientBrush>
    <Style x:Key="ImageButtonStyle" TargetType="{x:Type Image}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=IsEnabled,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type FrameworkElement}}}" Value="True">
                <Setter Property="OpacityMask" Value="{x:Null}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsEnabled,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type FrameworkElement}}}" Value="False">
                <Setter Property="OpacityMask" Value="{StaticResource InActive}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>


    <s:BooleanConverter x:Key="BooleanConverter"/>
    <s:BackgroundConverter x:Key="BackgroundConverter"/>
    <s:LayoutSelector x:Key="LayoutSelector"/>
    <DataTemplate x:Key="TextTemplate">
        <WrapPanel Margin="0,4">
            <TextBlock Text="{Binding Path=Name}" Style="{StaticResource Labeling}"/>
            <TextBox Text="{Binding Path=ParameterValue,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,ValidatesOnDataErrors=True,NotifyOnValidationError=True}"
                     Style="{StaticResource RedToolTip}" ToolTip="{Binding ElementName=customAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"
                     Width="80" TextAlignment="Right">
                <TextBox.Background>
                    <MultiBinding Converter="{StaticResource BackgroundConverter}">
                        <Binding Path="Success" UpdateSourceTrigger="PropertyChanged"/>
                        <Binding Path="."/>
                    </MultiBinding>
                </TextBox.Background>
            </TextBox>
            <TextBlock Text="{Binding Path=Unit}" Width="40"/>
        </WrapPanel>
    </DataTemplate>
    <DataTemplate x:Key="IntegerTemplate">
        <WrapPanel Margin="0,4">
            <TextBlock Text="{Binding Path=Name}" Style="{StaticResource Labeling}"/>
            <s:NumericUpDown Width="80" MaxValue="{Binding Path=MaxValue}" MinValue="{Binding Path=MinValue}" Margin="0,0,4,0"
                             Value="{Binding Path=ParameterValue,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,ValidatesOnDataErrors=True,NotifyOnValidationError=True}"
                             Style="{StaticResource RedToolTip}" ToolTip="{Binding ElementName=customAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}">
                <s:NumericUpDown.Background>
                    <MultiBinding Converter="{StaticResource BackgroundConverter}">
                        <Binding Path="Success" UpdateSourceTrigger="PropertyChanged"/>
                        <Binding Path="."/>
                    </MultiBinding>
                </s:NumericUpDown.Background>
            </s:NumericUpDown>
            <TextBlock Text="{Binding Path=Unit}" Width="40"/>
        </WrapPanel>
    </DataTemplate>
    
    <s:HexConverter x:Key="HexConverter"/>
    <!-- TODO: convert into HexControl -->
    <DataTemplate x:Key="HexTemplate">
        <WrapPanel Margin="0,4">
            <TextBlock Text="{Binding Path=Name}" Style="{StaticResource Labeling}"/>
            <TextBlock Text="0x"/>
            <TextBox Style="{StaticResource RedToolTip}" Width="60" TextAlignment="Right"
                     ToolTip="{Binding ElementName=customAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}">
                <TextBox.Text>
                    <MultiBinding Converter="{StaticResource HexConverter}">
                        <Binding Path="ParameterValue" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged"
                                 ValidatesOnDataErrors="True" NotifyOnValidationError="True"/>
                        <Binding Path="."/>
                    </MultiBinding>
                </TextBox.Text>
                <TextBox.Background>
                    <MultiBinding Converter="{StaticResource BackgroundConverter}">
                        <Binding Path="Success" UpdateSourceTrigger="PropertyChanged"/>
                        <Binding Path="."/>
                    </MultiBinding>
                </TextBox.Background>
            </TextBox>
            <TextBlock Text="{Binding Path=Unit}" Width="40"/>
        </WrapPanel>
    </DataTemplate>
    
    <s:OptionConverter x:Key="OptionConverter"/>
    <DataTemplate x:Key="OptionsTemplate">
        <WrapPanel Margin="0,4">
            <TextBlock Text="{Binding Path=Name}" ToolTip="{Binding Path=ParameterValue}" Style="{StaticResource Labeling}"/>
            <ComboBox ItemsSource="{Binding Path=ParameterOptions}" DisplayMemberPath="Value">
                <ComboBox.SelectedValue>
                    <MultiBinding Converter="{StaticResource OptionConverter}">
                        <Binding Path="ParameterOptions"/>
                        <Binding Path="ParameterValue" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged"/>
                    </MultiBinding>
                </ComboBox.SelectedValue>
                <ComboBox.Background>
                    <MultiBinding Converter="{StaticResource BackgroundConverter}">
                        <Binding Path="Success" UpdateSourceTrigger="PropertyChanged"/>
                        <Binding Path="."/>
                    </MultiBinding>
                </ComboBox.Background>
            </ComboBox>
            <TextBlock Text="{Binding Path=Unit}" Width="40"/>
        </WrapPanel>
    </DataTemplate>

    <s:RadioSelector x:Key="RadioSelector"/>
    <s:GetNameConverter x:Key="GetNameConverter"/>
    <DataTemplate x:Key="RadioTemplate">
        <WrapPanel Margin="0,4">
            <TextBlock Text="{Binding Path=Name}" Style="{StaticResource Labeling}"/>
            <RadioButton GroupName="{Binding Name}"
                Content="{Binding ParameterOptions[0],Converter={StaticResource GetNameConverter}}"
                IsChecked="{Binding Path=ParameterValue,Converter={StaticResource BooleanConverter},
                    ConverterParameter=0,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}">
                <RadioButton.Background>
                    <MultiBinding Converter="{StaticResource BackgroundConverter}">
                        <Binding Path="Success" UpdateSourceTrigger="PropertyChanged"/>
                        <Binding Path="."/>
                    </MultiBinding>
                </RadioButton.Background>
            </RadioButton>
            <RadioButton GroupName="{Binding Name}"
                Content="{Binding ParameterOptions[1],Converter={StaticResource GetNameConverter}}"
                IsChecked="{Binding Path=ParameterValue,Converter={StaticResource BooleanConverter},
                    ConverterParameter=1,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}">
                <RadioButton.Background>
                    <MultiBinding Converter="{StaticResource BackgroundConverter}">
                        <Binding Path="Success" UpdateSourceTrigger="PropertyChanged"/>
                        <Binding Path="."/>
                    </MultiBinding>
                </RadioButton.Background>
            </RadioButton>
            <TextBlock Text="{Binding Path=Unit}" Width="40"/>
        </WrapPanel>
    </DataTemplate>
    
    <!-- deprecated -->
    <DataTemplate x:Key="PositiveRadioTemplate">
        <RadioButton Content="{Binding Value}" GroupName="{Binding Value}"
            IsChecked="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}},
            Path=DataContext.ParameterValue,Converter={StaticResource BooleanConverter},ConverterParameter=1,
            Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
    </DataTemplate>
    <DataTemplate x:Key="NegativeRadioTemplate">
        <RadioButton Content="{Binding Value}" GroupName="{Binding Value}"
            IsChecked="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}},
            Path=DataContext.ParameterValue,Converter={StaticResource BooleanConverter},ConverterParameter=0,
            Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
    </DataTemplate>
</ResourceDictionary>